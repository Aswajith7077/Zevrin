// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SubscriptionPlanEnum {
  FREE
  PRO
  PREMIUM
  BASIC
  PLATINUM
}

enum ProcedureStepStatus {
  NOT_STARTED
  IN_PROGRESS
  WAITING
  COMPLETED
  BLOCKED
  CANCELLED
}

enum PaymentMethodEnum {
  BANK_ACCOUNT_TRANSFER
  UPI
  CREDIT_CARD
  CRYPTO_CURRENCY
  STOCKS
}

enum PaymentContextEnum {
  DEALS
  SUBSCRIPTIONS
}

enum CreditEventTypeEnum {
  BAD_SIGNER_REVIEW
  BETTER_SIGNER_REVIEW
}

enum DealStatusEnum {
  DRAFT
  ACTIVE
  INACTIVE
  REJECTED
  EXPIRED
  COMPLETED
}

enum CurrencyEnum {
  USD
  INR
}

enum TagEnum {
  FLEET
  YATCH
  PERFUME
  ATHAR
  IDOLS
  PRODUCTIVITY
  NOTEBOOKS
  BOOKS
  LAMPS
  STUDY_LAMPS
  DECORATIONS
  MEN
  WOMEN
  WATCHES
  BELTS
  TIES
  LUXURY
  BULKY
  CLASSY
  MODERN
  VINTAGE
}

enum UserRoleEnum {
  TRADER
  DEALER
  ADMIN
  STAFF
}

// User models
model User {
  id                 String              @id @default(uuid())
  firstname          String
  lastname           String
  email              String
  password           String
  phone              String
  isPhoneVerfied     Boolean             @default(false)
  isEmailVerfied     Boolean             @default(false)
  bio                String
  avatar             Image?              @relation(fields: [avatarId], references: [id])
  avatarId           String?             @unique
  isActive           Boolean             @default(true)
  officeAaddress     Address?            @relation(fields: [officeAddressId], references: [id])
  officeAddressId    String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastLoginDate      DateTime
  role               UserRoleEnum        @default(TRADER)
  metadata           Json
  dealer             Deal[]              @relation("Dealer")
  signer             Deal[]              @relation("Signer")
  comments           Comment[]
  favourites         Favourite[]
  myself             Connections[]       @relation("SourceUser")
  friends            Connections[]       @relation("DestinationUser")
  paymentMade        Payment[]           @relation("Payer")
  paymentRecieved    Payment[]           @relation("Reciever")
  receiverId         String?             @unique
  creditTransactions CreditTransaction[]
  subscription       Subscriptions?
  bankAccounts       BankAccounts[]
}

model Connections {
  id              String @id @default(uuid())
  sourceId        String
  sourceUser      User   @relation("SourceUser", fields: [sourceId], references: [id])
  destinationId   String
  destinationUser User   @relation("DestinationUser", fields: [destinationId], references: [id])
  relationShip    String
  metadata        Json
}

// Deal models
model Deal {
  id                  String             @id @default(uuid())
  dealer              User               @relation("Dealer", fields: [dealerId], references: [id])
  dealerId            String
  signer              User               @relation("Signer", fields: [signerId], references: [id])
  signerId            String
  title               String
  description         String
  price               Price?
  dealLocation        Address?           @relation(fields: [dealLocationId], references: [id])
  dealLocationId      String?            @unique
  isVirtual           Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  expiresAt           DateTime
  validityDays        Int                @default(0)
  expectedArrivalDays Int
  expectedArrivalTime DateTime?
  signedAt            DateTime?
  completedAt         DateTime?
  status              DealStatusEnum
  signerRatings       Float
  dealerCredits       Float
  signerCredits       Float
  feedback            String
  views               Int
  metadata            Json
  favourites          Favourite[]
  procedures          Procedure[]
  contractDocuments   Document[]
  tags                Tag[]
  images              Image[]
  comments            Comment[]
  creditTransaction   CreditTransaction? @relation(fields: [creditTransactionId], references: [id])
  creditTransactionId String?            @unique
}

model Tag {
  id     String  @id @default(uuid())
  tag    TagEnum
  dealId String
  deal   Deal    @relation(fields: [dealId], references: [id])
}

// Banner and Category models
model Banner {
  id            String  @id @default(uuid())
  bannerImage   Image?  @relation(fields: [bannerImageId], references: [id])
  bannerImageId String? @unique
}

model Category {
  id              String  @id @default(uuid())
  name            String
  url             String
  categoryImage   Image?  @relation(fields: [categoryImageId], references: [id])
  categoryImageId String? @unique
}

// Comment model
model Comment {
  id              String      @id @default(uuid())
  commentedBy     User        @relation(fields: [commentedById], references: [id])
  commentedById   String
  title           String
  commentText     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  metadata        Json
  parentCommentId String?
  parentComment   Comment?    @relation("ReplyComment", fields: [parentCommentId], references: [id])
  replyComment    Comment[]   @relation("ReplyComment")
  likes           Favourite[]
  dealId          String
  deal            Deal        @relation(fields: [dealId], references: [id])
}

// Payment models
model Payment {
  id                  String             @id @default(uuid())
  paymentAmount       Price?
  paymentMethod       PaymentMethodEnum
  paymentDoneAt       DateTime
  paymentRecievedAt   DateTime
  contextType         PaymentContextEnum
  contextId           String
  payerId             String
  recieverId          String
  creditTransactionId String             @unique
  creditTransaction   CreditTransaction  @relation(fields: [creditTransactionId], references: [id])
  payer               User               @relation("Payer", fields: [payerId], references: [id])
  reciever            User               @relation("Reciever", fields: [recieverId], references: [id])
}

model CreditRule {
  id                  String              @id @default(uuid())
  eventType           CreditEventTypeEnum
  score               Int
  description         String
  isActive            Boolean             @default(true)
  creditTransactionId String              @unique
  creditTransaction   CreditTransaction   @relation(fields: [creditTransactionId], references: [id])
}

model CreditTransaction {
  id        String      @id @default(uuid())
  amount    Price?
  payment   Payment?
  rule      CreditRule?
  deal      Deal?
  user      User?       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  reason    String
  metadata  Json
}

// Procedure models
model Procedure {
  id             String          @id @default(uuid())
  title          String
  description    String
  metadata       String
  dealId         String
  deal           Deal            @relation(fields: [dealId], references: [id])
  procedureSteps ProcedureStep[]
}

model ProcedureStep {
  id                String              @id @default(uuid())
  title             String
  description       String
  status            ProcedureStepStatus
  instructions      Json
  startedAt         DateTime
  completedAt       DateTime
  expectedTime      Int
  metadata          Json
  requiredDocuments Document[]
  Procedure         Procedure?          @relation(fields: [procedureId], references: [id])
  procedureId       String
}

model Address {
  id         String @id @default(uuid())
  user       User?
  streetName String
  cityName   String
  state      String
  country    String
  zipcode    String
  deal       Deal?
}

model Image {
  id        String    @id @default(uuid())
  pathname  String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?
  banner    Banner?
  category  Category?
  deal      Deal?     @relation(fields: [dealId], references: [id])
  dealId    String
}

model Price {
  id                  String            @id @default(uuid())
  amount              Decimal           @default(0)
  currency            CurrencyEnum
  dealId              String?           @unique
  paymentAmountId     String            @unique
  creditTransactionId String            @unique
  deal                Deal?             @relation(fields: [dealId], references: [id])
  paymentAmount       Payment           @relation(fields: [paymentAmountId], references: [id])
  creditTransaction   CreditTransaction @relation(fields: [creditTransactionId], references: [id])
}

model Favourite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  postedAt  DateTime
  dealId    String
  deal      Deal     @relation(fields: [dealId], references: [id])
  Comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
}

model Document {
  id              String        @id @default(uuid())
  filepath        String
  fileformat      String
  metadata        Json
  dealContractId  String
  procedureStepId String
  dealContract    Deal          @relation(fields: [dealContractId], references: [id])
  procedureStep   ProcedureStep @relation(fields: [procedureStepId], references: [id])
}

model Subscriptions {
  id           String               @id @default(uuid())
  plan         SubscriptionPlanEnum
  user         User?                @relation(fields: [userId], references: [id])
  userId       String?              @unique
  description  String
  subscribedOn DateTime
  expiresOn    DateTime
  metadata     Json
}

model BankAccounts {
  id       String @id @default(uuid())
  bankName String
  account  String
  ifsc     String
  metadata Json
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}
