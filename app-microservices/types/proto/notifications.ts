// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: notifications.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Timestamp } from './google/protobuf/timestamp';

export const protobufPackage = 'notifications';

export enum NotificationType {
  INFO = 0,
  WARNING = 1,
  ALERT = 2,
  PROMOTION = 3,
  UNRECOGNIZED = -1,
}

export enum NotificationMedium {
  EMAIL = 0,
  SMS = 1,
  PUSH = 2,
  IN_APP = 3,
  UNRECOGNIZED = -1,
}

export enum NotificationStatus {
  UNREAD = 0,
  READ = 1,
  ARCHIVED = 2,
  UNRECOGNIZED = -1,
}

export interface SendNotificationRequest {
  userId: string;
  message: string;
  type: NotificationType;
  /** e.g., "email", "sms", "push" */
  medium: NotificationMedium;
}

export interface SendNotificationResponse {
  success: boolean;
  message: string;
}

export interface GetNotificationsRequest {
  userId: string;
  /** e.g., "unread", "read", "all" */
  status: NotificationStatus;
  /** e.g., "email", "sms", "push" */
  type: NotificationType;
  /** e.g., "email", "sms", " */
  medium: NotificationMedium;
  /** number of notifications to retrieve */
  limit: number;
  /** pagination offset */
  offset: number;
}

export interface GetNotificationsResponse {
  notifications: Notification[];
  /** total number of notifications for the user */
  total: number;
}

export interface Notification {
  id: string;
  userId: string;
  messageText?: string | undefined;
  /** e.g., "email", "sms", "push" */
  type: NotificationType;
  medium: NotificationMedium;
  status: NotificationStatus;
  /** Unix timestamp */
  timestamp: Timestamp | undefined;
}

export const NOTIFICATIONS_PACKAGE_NAME = 'notifications';

export interface NotificationServiceClient {
  sendNotification(
    request: SendNotificationRequest
  ): Observable<SendNotificationResponse>;

  getNotifications(
    request: GetNotificationsRequest
  ): Observable<GetNotificationsResponse>;
}

export interface NotificationServiceController {
  sendNotification(
    request: SendNotificationRequest
  ):
    | Promise<SendNotificationResponse>
    | Observable<SendNotificationResponse>
    | SendNotificationResponse;

  getNotifications(
    request: GetNotificationsRequest
  ):
    | Promise<GetNotificationsResponse>
    | Observable<GetNotificationsResponse>
    | GetNotificationsResponse;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['sendNotification', 'getNotifications'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcMethod('NotificationService', method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcStreamMethod('NotificationService', method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = 'NotificationService';
