// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: auth/services.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import {
  ChangePasswordRequest,
  ChangePasswordResponse,
} from './messages/change_password';
import { LoginRequest, LoginResponse } from './messages/login';
import { LogoutRequest, LogoutResponse } from './messages/logout';
import { RefreshTokenRequest, RefreshTokenResponse } from './messages/refresh';
import {
  ValidateTokenRequest,
  ValidateTokenResponse,
} from './messages/validate';

export const protobufPackage = 'auth';

export const AUTH_PACKAGE_NAME = 'auth';

export interface AuthServiceClient {
  login(request: LoginRequest): Observable<LoginResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

  logout(request: LogoutRequest): Observable<LogoutResponse>;

  validateToken(
    request: ValidateTokenRequest
  ): Observable<ValidateTokenResponse>;

  changePassword(
    request: ChangePasswordRequest
  ): Observable<ChangePasswordResponse>;
}

export interface AuthServiceController {
  login(
    request: LoginRequest
  ): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  refreshToken(
    request: RefreshTokenRequest
  ):
    | Promise<RefreshTokenResponse>
    | Observable<RefreshTokenResponse>
    | RefreshTokenResponse;

  logout(
    request: LogoutRequest
  ): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  validateToken(
    request: ValidateTokenRequest
  ):
    | Promise<ValidateTokenResponse>
    | Observable<ValidateTokenResponse>
    | ValidateTokenResponse;

  changePassword(
    request: ChangePasswordRequest
  ):
    | Promise<ChangePasswordResponse>
    | Observable<ChangePasswordResponse>
    | ChangePasswordResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'login',
      'refreshToken',
      'logout',
      'validateToken',
      'changePassword',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
